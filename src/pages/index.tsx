import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";
import { UserPersona } from "@/types";
import classNames from "classnames";
import axios from "axios";

const personaCache = new Map<string, UserPersona>();

export default function Home() {
  const [persona, setPersona] = useState<UserPersona | undefined>(undefined);
  const [description, setDescription] = useState<string>("");
  const [status, setStatus] = useState<"idle" | "loading">("idle");

  async function generatePersona() {
    setStatus("loading");

    if (personaCache.has(description)) {
      setPersona(personaCache.get(description));
      setStatus("idle");
      return;
    }

    try {
      const persona = await axios.post<{ data: UserPersona }>("/api/persona", {
        description,
      });
      setPersona(persona.data.data);
      personaCache.set(description, persona.data.data);
    } finally {
      setStatus("idle");
    }
  }

  async function mockPersona() {
    setStatus("loading");

    try {
      const persona = await axios.get("/dummy/persona.json");

      setPersona(persona.data);
    } finally {
      setStatus("idle");
    }
  }

  return (
    <>
      <Head>
        <title>Persona Generator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <section className="hero">
          <div className="hero-content flex-col lg:flex-row">
            <div>
              <div className="flex gap-4">
                <h1 className="text-5xl font-bold">Persona Generator</h1>
                <ThemeSwap />
              </div>
              <p className="py-6">
                Generate random personas from your product description.
              </p>
              <textarea
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                className="textarea textarea-bordered w-full"
                placeholder="Describe your product."
              />
              <div className="w-full flex justify-end my-2 gap-2">
                <button
                  disabled={status === "loading"}
                  onClick={mockPersona}
                  className="btn btn-secondary"
                >
                  Mock
                </button>
                <button
                  onClick={generatePersona}
                  disabled={!description}
                  className={classNames("btn btn-primary", {
                    loading: status === "loading",
                  })}
                >
                  Generate
                </button>
              </div>
            </div>
          </div>
        </section>
        {persona && <PersonaCard persona={persona} />}
      </main>
    </>
  );
}

function PersonaCard({ persona }: { persona: UserPersona }) {
  return (
    <section className="hero">
      <div className="max-w-screen-md bg-base-200 p-4 rounded-lg shadow-x1">
        <div className="flex gap-4">
          <div className="avatar">
            <div className="w-24 rounded">
              <Image
                className="rounded"
                src={persona.profileImage || ""}
                fill
                alt="profile-image"
              />
            </div>
          </div>
          <div>
            <h2 className="text-3xl font-bold">{persona.name}</h2>
            <ul className="mt-2">
              <li>
                <span className="text-xl">Age: </span>
                <span className="text-xl">{persona.age}</span>
              </li>
              <li>
                <span className="text-xl">Gender: </span>
                <span className="text-xl">{persona.gender}</span>
              </li>
              <li>
                <span className="text-xl">Job: </span>
                <span className="text-xl">{persona.job}</span>
              </li>
            </ul>
          </div>
        </div>
        <div className="mt-4">
          <span className="font-bold text-2xl">Bio</span>
          <p className="text-lg">{persona.bio}</p>
        </div>
        <div className="mt-4">
          <span className="font-bold text-2xl">Pain Points</span>
          <ul className="mt-2">
            {persona.pains?.map((pain, index) => (
              <li className="text-lg" key={pain}>
                <span>{index + 1}. </span>
                <span>{pain}</span>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </section>
  );
}

function ThemeSwap() {
  const [theme, setTheme] = useState<"light" | "dark">(() => {
    if (typeof window === "undefined") return "light";
    if (window.matchMedia) {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return "dark";
      } else {
        ("light");
      }
    }
    return "light";
  });
  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  useEffect(() => {
    document.querySelector("html")?.setAttribute("data-theme", theme);
  }, [theme]);

  return (
    <label className="swap swap-rotate">
      <input onClick={toggleTheme} type="checkbox" />
      <svg
        className="swap-on fill-current w-10 h-10"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z" />
      </svg>
      <svg
        className="swap-off fill-current w-10 h-10"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
      >
        <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z" />
      </svg>
    </label>
  );
}
